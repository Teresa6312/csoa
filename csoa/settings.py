"""
Django settings for csoa project.

Generated by 'django-admin startproject' using Django 5.0.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from .settings_local import *

# from .settings_test import *
# from .settings_production import *

from pathlib import Path
import os

SITE_NAME = "OA System"

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# Application definition
INSTALLED_APPS = [
    "base.apps.BaseConfig",
    "userManagement.apps.UsermanagementConfig",
    "jsonForm.apps.JsonformConfig",
    "modelBase.apps.ModelbaseConfig",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.admindocs",  # Enable admindocs
    "simple_history",
    "rest_framework",  # Enable Django REST framework
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",  # 放在最前面是最佳实践。它处理一些安全相关的设置，尽早应用可以提高安全性。
    "django.contrib.sessions.middleware.SessionMiddleware",  # 通常放在 CommonMiddleware 之前，因为它依赖于会话。
    "django.middleware.common.CommonMiddleware",  # 处理一些通用的任务，比如 URL 重写、gzip 压缩等。
    "django.middleware.csrf.CsrfViewMiddleware",  # 必须在 SessionMiddleware 之后，因为它使用会话来存储 CSRF token。
    "django.contrib.auth.middleware.AuthenticationMiddleware",  # 在 SessionMiddleware 之后，它使用会话来验证用户身份。
    "django.contrib.messages.middleware.MessageMiddleware",  # 通常放在 AuthenticationMiddleware 之后，因为它可能需要访问用户信息。
    "django.middleware.clickjacking.XFrameOptionsMiddleware",  # 处理 clickjacking 攻击，位置一般放在安全相关的中间件之后。
    "simple_history.middleware.HistoryRequestMiddleware",  # 用于 simple_history 记录历史变更，位置通常放在与数据库操作相关的中间件之前。
    # middleware to required user login
    "csoa.middleware.LoginRequiredMiddleware",
    # middleware to print user login/logout log
    "base.middleware.UserActivityMiddleware",
    # middleware to set menu in request
    "base.middleware.MenuMiddleware",
    # middleware to Ensure that multiple database operations are performed in one request
    # to avoid data inconsistency caused by failure of some operations
    "base.middleware.AtomicTransactionMiddleware",  # 这是一个很好的实践，它可以确保所有数据库操作都在一个事务中完成。  但需要仔细检查你的中间件和视图函数，确保所有涉及数据库操作的代码都在这个中间件的“包裹”之下。  如果有些数据库操作在事务之外，可能会导致数据不一致。
]

if DEBUG == False:
    MIDDLEWARE.append(
        "base.middleware.CustomErrorHandlingMiddleware"
    )  # middleware to handle error pages


ROOT_URLCONF = "csoa.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [
            BASE_DIR / "base" / "templates",
        ],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "django.template.context_processors.csrf",  # for using Resfull API set up CSRF (Cross-Site Request Forgery) protection  setup_csrf
                "base.context_processors.default_context",  # set subtitle, is_nav_sidebar_enabled, is_popup for all request
            ],
        },
    },
]

WSGI_APPLICATION = "csoa.wsgi.application"


AUTHENTICATION_BACKENDS = [
    # Django ModelBackend is the default authentication backend.
    "django.contrib.auth.backends.ModelBackend",
]

# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/


FILE_UPLOAD_MAX_MEMORY_SIZE = 20 * 1024 * 1024  # 20 MB in bytes
FILE_UPLOAD_MAX_VOLUME = 10
# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

AUTH_USER_MODEL = "userManagement.CustomUser"

# Email backend configuration
EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"

LOGIN_REDIRECT_URL = "/"  # Redirect to the home page after login

# Session configuration
SESSION_ENGINE = "django.contrib.sessions.backends.cache"
SESSION_CACHE_ALIAS = "sessions"
SESSION_COOKIE_AGE = 60 * 15  # session expire time, in seconds
SESSION_EXPIRE_AT_BROWSER_CLOSE = (
    True  # Whether to expire the session when the user closes the browser
)
SESSION_SAVE_EVERY_REQUEST = True  # Whether to save the session data on every request


CONN_MAX_AGE = 60  # The lifetime of a database connection, in seconds. Use 0 to close database connections at the end of each request.
CONN_HEALTH_CHECKS = True  # Enable health checks for database connections
CONN_HEALTH_CHECK_PERIOD = (
    30  # The number of seconds between database connection health checks
)

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "filters": {
        "require_debug_false": {
            "()": "django.utils.log.RequireDebugFalse"  # 允许配置仅在生产环境（DEBUG=False）下激活的日志处理器，而在开发环境（DEBUG=True）下则不激活。
        }
    },
    "formatters": {
        "default": {
            "format": "%(levelname)s %(asctime)s %(pathname)s/%(module)s - %(funcName)s [line: %(lineno)d]  %(process)d %(thread)d %(message)s",
        },
        "user_activity": {
            "format": "%(levelname)s %(asctime)s %(pathname)s/%(module)s - %(funcName)s [line: %(lineno)d]  %(process)d %(thread)d User: %(user_id)s %(message)s",
        },
    },
    "handlers": {
        "file": {
            "level": "DEBUG" if DEBUG else "ERROR",
            "class": "logging.handlers.TimedRotatingFileHandler",
            "filename": os.path.join(LOG_DIR, "logfile.log"),
            "when": "midnight",  # Rotate logs at midnight
            "delay": True,  # Delay opening the file until the first log message
            "backupCount": 7,  # Keep 7 days of logs
            "formatter": "default",
        },
        "console": {
            "level": "DEBUG" if DEBUG else "ERROR",
            "class": "logging.StreamHandler",
            "formatter": "default",
        },
        "user_activity_file": {
            "level": "INFO",
            "class": "logging.handlers.TimedRotatingFileHandler",
            "filename": os.path.join(LOG_DIR, "user_activity.log"),
            "when": "midnight",  # Rotate logs at midnight
            "backupCount": 7,  # Keep 7 days of logs
            "delay": True,  # Delay opening the file until the first log message
            "formatter": "user_activity",
        },
        "mail_admins": {
            "level": "ERROR",
            "class": "django.utils.log.AdminEmailHandler",
            "filters": ["require_debug_false"],  # 仅在 DEBUG=False 时发送邮件
        },
        "template_debug": {  # For redirection
            "level": "DEBUG",
            "class": "logging.handlers.TimedRotatingFileHandler",
            "filename": os.path.join(LOG_DIR, "template_errors.log"),
            "when": "midnight",
            "backupCount": 7,
            "formatter": "default",
        },
    },
    "loggers": {
        "django": {
            "handlers": ["file"],  # , 'console'
            "level": "DEBUG" if DEBUG else "ERROR",
            "propagate": True,
        },
        "django.template": {  # Key change
            "handlers": [
                "template_debug"
            ],  # For redirection (or ["file"] to keep in main logs)
            "level": "WARNING",  # Use WARNING to suppress DEBUG logs
            "propagate": False,
        },
        "django.db.backends": {
            "handlers": ["file", "console"],
            "level": "DEBUG" if DEBUG else "ERROR",
            "propagate": False,
        },
        "user_activity": {
            "handlers": ["user_activity_file"],
            "level": "INFO",
            "propagate": False,
        },
        "django.utils.autoreload": {
            "handlers": ["file", "console"],
            "level": "WARNING",
            "propagate": False,
        },
    },
}

#
# Redis Key format "%s:%s:%s" % (key_prefix, version, key)
CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": f"redis://{REDIS_HOST}:{REDIS_PORT}/{REDIS_DB_CACHE}",  # Redis 服务器地址
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
            "DECODE_RESPONSES": True,  # Important for correct data handling
            "SOCKET_TIMEOUT": 5,  # 连接超时时间
        },
        "TIMEOUT": CACHE_TIMEOUT_DEFAULT,
        # 'KEY_PREFIX': 'global'  # Optional prefix to avoid namespacing issues
    },
    "sessions": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": f"redis://{REDIS_HOST}:{REDIS_PORT}/{REDIS_DB_SESSIONS}",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
            # "PASSWORD": "your_redis_password",  # 如果有密码
            "SOCKET_TIMEOUT": 5,  # 连接超时时间
        },
    },
}
