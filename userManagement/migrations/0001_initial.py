# Generated by Django 5.1.1 on 2024-09-09 02:43

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import simple_history.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('position', models.CharField(blank=True, max_length=63, null=True)),
                ('office_phone', models.CharField(blank=True, help_text='Format:"000-000-0000"', max_length=15, null=True, validators=[django.core.validators.RegexValidator(message='Invalid phone number format. Enter as 000-000-0000.', regex='^\\d{3}-\\d{3}-\\d{4}$')])),
                ('mobile', models.CharField(blank=True, help_text='Format:"000-000-0000"', max_length=15, null=True, validators=[django.core.validators.RegexValidator(message='Invalid phone number format. Enter as 000-000-0000.', regex='^\\d{3}-\\d{3}-\\d{4}$')])),
                ('title', models.CharField(blank=True, choices=[('Mr.', 'Mr.'), ('Ms.', 'Miss'), ('Mrs.', 'Mrs.'), ('Mx.', 'Mx.')], max_length=15, null=True)),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='AppMenu',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.CharField(max_length=31, validators=[django.core.validators.RegexValidator(message='Only accepts letters (a-z, A-Z), numbers (0-9), dashes (-), and underscores (_).', regex='^[a-zA-Z0-9_-]+$')])),
                ('label', models.CharField(max_length=63)),
                ('icon', models.CharField(blank=True, max_length=31, null=True)),
                ('link', models.CharField(blank=True, max_length=63, null=True)),
                ('control_type', models.CharField(blank=True, choices=[('app', 'App'), ('company', 'Company'), ('department', 'Department'), ('team', 'Team')], help_text='If control type is empty, which means this is a menu/functions under the sub app', max_length=31, null=True)),
                ('menu_level', models.PositiveSmallIntegerField(default=0, validators=[django.core.validators.MaxValueValidator(5)])),
                ('is_active', models.BooleanField(default=False)),
                ('diango_view', models.CharField(blank=True, max_length=127, null=True)),
                ('data_control', models.BooleanField(default=False)),
                ('parent_app_menu', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='userManagement.appmenu')),
            ],
        ),
        migrations.CreateModel(
            name='Company',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('short_name', models.CharField(max_length=15, unique=True)),
                ('full_name', models.CharField(max_length=127, unique=True)),
                ('is_active', models.BooleanField(default=True)),
                ('manager', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='company_manager', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='customuser',
            name='company',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='user_company', to='userManagement.company'),
        ),
        migrations.CreateModel(
            name='CustomGroup',
            fields=[
                ('group_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='auth.group')),
                ('group_type', models.PositiveSmallIntegerField(blank=True, choices=[(1, '[App Name] role'), (2, 'Normal Team role'), (3, 'Normal Department role'), (4, 'Normal Company role'), (5, 'Team Manager role'), (6, 'Department Manager role'), (7, 'Company Manager role'), (8, 'Department Senior role'), (9, 'App Team role'), (10, 'App Department role'), (12, 'App Company role')], help_text='\n                                                  If group type is empty, which means this is a basic group and not a role for assigning to business user\n\n                                                    # [App Name] role only apply for specific application, so apps.count = 1, and this role is applicatable to which team/department/company that the user has permission to\n                                                    # Normal [team/department/company] role is applicable for selected application, and this role is applicatable to which team/department/company that the user belongs to\n                                                    # [team/department/company] manager role is applicable for selected application, and this role is applicatable to which team/department/company that the user belongs to\n                                                    # team/department/company] role is applicable for selected application, and this role is applicatable to which team/department/company that the user has permission to\n                                                  ', null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('menus', models.ManyToManyField(blank=True, related_name='group_menus', to='userManagement.appmenu')),
            ],
            options={
                'verbose_name': 'group',
                'verbose_name_plural': 'groups',
            },
            bases=('auth.group', models.Model),
            managers=[
                ('objects', django.contrib.auth.models.GroupManager()),
            ],
        ),
        migrations.AddField(
            model_name='customuser',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='groups', related_query_name='user', to='userManagement.customgroup', verbose_name='roles'),
        ),
        migrations.CreateModel(
            name='Department',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('short_name', models.CharField(max_length=15, unique=True)),
                ('full_name', models.CharField(max_length=127, unique=True)),
                ('is_active', models.BooleanField(default=True)),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='department_company', to='userManagement.company')),
                ('manager', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='department_manager', to=settings.AUTH_USER_MODEL)),
                ('senior_manager', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='department_senior_manager', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='customuser',
            name='department',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='user_department', to='userManagement.department'),
        ),
        migrations.CreateModel(
            name='HistoricalAppMenu',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('key', models.CharField(max_length=31, validators=[django.core.validators.RegexValidator(message='Only accepts letters (a-z, A-Z), numbers (0-9), dashes (-), and underscores (_).', regex='^[a-zA-Z0-9_-]+$')])),
                ('label', models.CharField(max_length=63)),
                ('icon', models.CharField(blank=True, max_length=31, null=True)),
                ('link', models.CharField(blank=True, max_length=63, null=True)),
                ('control_type', models.CharField(blank=True, choices=[('app', 'App'), ('company', 'Company'), ('department', 'Department'), ('team', 'Team')], help_text='If control type is empty, which means this is a menu/functions under the sub app', max_length=31, null=True)),
                ('menu_level', models.PositiveSmallIntegerField(default=0, validators=[django.core.validators.MaxValueValidator(5)])),
                ('is_active', models.BooleanField(default=False)),
                ('diango_view', models.CharField(blank=True, max_length=127, null=True)),
                ('data_control', models.BooleanField(default=False)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('parent_app_menu', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='userManagement.appmenu')),
            ],
            options={
                'verbose_name': 'historical app menu',
                'verbose_name_plural': 'historical app menus',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalCompany',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('short_name', models.CharField(db_index=True, max_length=15)),
                ('full_name', models.CharField(db_index=True, max_length=127)),
                ('is_active', models.BooleanField(default=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('manager', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical company',
                'verbose_name_plural': 'historical companys',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalCustomGroup',
            fields=[
                ('group_ptr', models.ForeignKey(auto_created=True, blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, parent_link=True, related_name='+', to='auth.group')),
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=150, verbose_name='name')),
                ('group_type', models.PositiveSmallIntegerField(blank=True, choices=[(1, '[App Name] role'), (2, 'Normal Team role'), (3, 'Normal Department role'), (4, 'Normal Company role'), (5, 'Team Manager role'), (6, 'Department Manager role'), (7, 'Company Manager role'), (8, 'Department Senior role'), (9, 'App Team role'), (10, 'App Department role'), (12, 'App Company role')], help_text='\n                                                  If group type is empty, which means this is a basic group and not a role for assigning to business user\n\n                                                    # [App Name] role only apply for specific application, so apps.count = 1, and this role is applicatable to which team/department/company that the user has permission to\n                                                    # Normal [team/department/company] role is applicable for selected application, and this role is applicatable to which team/department/company that the user belongs to\n                                                    # [team/department/company] manager role is applicable for selected application, and this role is applicatable to which team/department/company that the user belongs to\n                                                    # team/department/company] role is applicable for selected application, and this role is applicatable to which team/department/company that the user has permission to\n                                                  ', null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical group',
                'verbose_name_plural': 'historical groups',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalCustomUser',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(db_index=True, error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('position', models.CharField(blank=True, max_length=63, null=True)),
                ('office_phone', models.CharField(blank=True, help_text='Format:"000-000-0000"', max_length=15, null=True, validators=[django.core.validators.RegexValidator(message='Invalid phone number format. Enter as 000-000-0000.', regex='^\\d{3}-\\d{3}-\\d{4}$')])),
                ('mobile', models.CharField(blank=True, help_text='Format:"000-000-0000"', max_length=15, null=True, validators=[django.core.validators.RegexValidator(message='Invalid phone number format. Enter as 000-000-0000.', regex='^\\d{3}-\\d{3}-\\d{4}$')])),
                ('title', models.CharField(blank=True, choices=[('Mr.', 'Mr.'), ('Ms.', 'Miss'), ('Mrs.', 'Mrs.'), ('Mx.', 'Mx.')], max_length=15, null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('company', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='userManagement.company')),
                ('department', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='userManagement.department')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical user',
                'verbose_name_plural': 'historical users',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalDepartment',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('short_name', models.CharField(db_index=True, max_length=15)),
                ('full_name', models.CharField(db_index=True, max_length=127)),
                ('is_active', models.BooleanField(default=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('company', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='userManagement.company')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('manager', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('senior_manager', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical department',
                'verbose_name_plural': 'historical departments',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalTeam',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('short_name', models.CharField(db_index=True, max_length=15)),
                ('full_name', models.CharField(db_index=True, max_length=127)),
                ('is_active', models.BooleanField(default=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('department', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='userManagement.department')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('manager', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical team',
                'verbose_name_plural': 'historical teams',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='Permission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('app', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='permission_app', to='userManagement.appmenu')),
                ('company', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='permission_company', to='userManagement.company')),
                ('department', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='permission_department', to='userManagement.department')),
                ('role', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='permission_role', to='userManagement.customgroup')),
            ],
        ),
        migrations.AddField(
            model_name='customuser',
            name='permissions',
            field=models.ManyToManyField(blank=True, related_name='user_permissions', to='userManagement.permission'),
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('short_name', models.CharField(max_length=15, unique=True)),
                ('full_name', models.CharField(max_length=127, unique=True)),
                ('is_active', models.BooleanField(default=True)),
                ('department', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='team_department', to='userManagement.department')),
                ('manager', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='team_manager', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='permission',
            name='team',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='permission_team', to='userManagement.team'),
        ),
        migrations.CreateModel(
            name='HistoricalPermission',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('app', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='userManagement.appmenu')),
                ('company', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='userManagement.company')),
                ('department', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='userManagement.department')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('role', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='userManagement.customgroup')),
                ('team', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='userManagement.team')),
            ],
            options={
                'verbose_name': 'historical permission',
                'verbose_name_plural': 'historical permissions',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.AddField(
            model_name='customuser',
            name='team',
            field=models.ManyToManyField(blank=True, related_name='user_team', to='userManagement.team'),
        ),
        migrations.AddConstraint(
            model_name='appmenu',
            constraint=models.UniqueConstraint(fields=('key', 'label', 'link', 'menu_level', 'parent_app_menu'), name='unique App menu'),
        ),
        migrations.AddConstraint(
            model_name='permission',
            constraint=models.UniqueConstraint(fields=('role', 'app', 'team', 'department', 'company'), name='unique permisson'),
        ),
    ]
